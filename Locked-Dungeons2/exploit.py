from hashlib import sha256,md5
from Crypto.Cipher import AES
import os
import random
from binascii import hexlify, unhexlify
from base64 import b64decode, b64encode
import sys
from string import printable 

def exploit(ct):
    
    ct=b64decode(ct)
    lenct=len(ct)
    orginal="send_modflag_enc"
    reqd="get_modflag_md5"

    Cipher_blocks=[]
    for i in range(len(ct)/16):
        Cipher_blocks.append(ct[i*16:(i+1)*16])

    
    block1=list(Cipher_blocks[0])
    num=0
    
    for i,j in zip(orginal,reqd):
        block1[num]=chr(ord(block1[num])^ord(i)^ord(j))
        num+=1

    Cipher_blocks[0]=''.join(block1)
    ct=''.join(Cipher_blocks)
    ct=b64encode(ct)
    
    return ct

BLOCK_SIZE = 16
KEY = os.urandom(16)
IV = os.urandom(16)

pad_len = lambda inp: (BLOCK_SIZE - len(inp) % BLOCK_SIZE)
pad = lambda inp: inp + chr(pad_len(inp))*pad_len(inp)
unpad = lambda inp: inp[:-ord(inp[-1])]

class AESCipher:
    def __init__(self, key):
        self.key = sha256(key).digest()

    def __encrypt(self, _str, iv):
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        padded_str = pad(_str)
        return cipher.encrypt(padded_str)
    
    def encrypt_wrapper(self, _str, iv):
        return b64encode(iv + self.__encrypt(_str, iv))

    def __decrypt(self, enc_str, iv):
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        #print("Bef pad: ",len(enc_str))
        decrypted_str = cipher.decrypt(enc_str)
        decrypted_str = unpad(decrypted_str)
        #print("Aft pad: ",len(decrypted_str))
        return decrypted_str

    def decrypt_wrapper(self, encoded_enc_str):
        enc_str = b64decode(encoded_enc_str)
        return self.__decrypt(enc_str[16:], enc_str[:16])

if __name__ == "__main__":
    with open("flag.txt") as fd:
        flag = fd.read().strip()
    flag_size = len(flag)
    key=KEY
    insertion_range = flag_size//BLOCK_SIZE
    insertion_position = 0
    #random.randrange(insertion_range)*BLOCK_SIZE
    mod_flag = flag[:insertion_position] + "send_modflag_enc" + flag[insertion_position:]
    aescipher = AESCipher(key)
    enc_mod_flag = aescipher.encrypt_wrapper(mod_flag, IV)
    
    next_level = False
    for i in range(insertion_range):
        # sys.stdout.write("What do you want me to do?\n")
        # sys.stdout.flush()
        # enc_recv_str = raw_input()
        enc_recv_str=exploit(enc_mod_flag)
        tempct=enc_recv_str

        print("len of tempct: ",len(tempct))
            
        dec_recv_str = aescipher.decrypt_wrapper(enc_recv_str)
        print dec_recv_str
        if "get_modflag_md5" in dec_recv_str:
            next_level = True
            print("Dungeon goes deeper..")
            break
        else:
            sys.stdout.write("I am gonna ask again!\n")
            

    if next_level:
        enc_recv_str = aescipher.encrypt_wrapper(mod_flag, IV)
        len_enc_mod_flag = len(enc_mod_flag)
        inp_size_limit = int(len_enc_mod_flag*4/3) + 50

        #DECLARING VRIABLES FOR THE EXPLOIT

        flag1='send_modflag_enc'  
        hash_list=[]
        l=[]
        fla=''

        for i in range(79,33,-1):
                l.append(chr(i))


        for i in xrange(500):

            enc_mod_flag=b64decode(enc_mod_flag)
            
            mod_flag=enc_mod_flag
        
            #FINAL EXPLOIT!!!!            

            for j in range(256):

                mod_ct=mod_flag + 'a'*15+chr(j) 
                mod_ct=b64encode(mod_ct)
                enc_recv_str = mod_ct

                if len(enc_recv_str) > inp_size_limit:
                    continue

                dec_recv_str = aescipher.decrypt_wrapper(enc_recv_str)
                
                print ("decrypted flag: ",dec_recv_str)
                md5hash=b64encode(md5(dec_recv_str).digest())
                print md5
                md5hash=b64decode(md5hash)
                hash_list.append(md5hash)
                           
                for char in printable:
                                     
                    checkhash=md5(flag1+fla+char).digest()
                    if checkhash==md5hash or checkhash in hash_list:
                    
                        fla+=char
                        print fla

           
            print('\n')
            print("Flag is: ",fla)
            exit()

             






                
