from Keylen import *
from base64 import b64decode
from string import *

def bruteforce_key(ctext,i):
	
	possible_chars=printable
	
	for index in range(len(valid_key_chars)):
		if(key_validity(ctext,possible_chars[index],i)):
			return possible_chars[index]
		else:
			continue

def key_validity(ctext,key,i):
	
	b64check = digits+"=+/"+ascii_letters+"\n"
	key=" "*i+key+" "*((keylength-1)-i)
	plaintext=decrypt(ctext,key)
	for index in range(i,len(plaintext),12):
		if plaintext[index] not in b64check:
			return 0	
	return 1

def multikey(k):

	while len(k) < len(ctext):
	        k += k
	k = k[:len(ctext)]
	return k

def decrypt(ctext,key):
	
	plaintext=''
	ctext=ctext.decode("hex")
	key=multikey(key)
	for i in range(len(ctext)):
	        plaintext += chr(ord(ctext[i]) ^ ord(key[i]))
	return plaintext
	

if __name__ == '__main__':

	ctext=open("ciphertext.txt",'r').read().strip()
	keylength=calc_keylen(ctext)

	k=''
	for i in range(keylength):
		k+=bruteforce_key(ctext,i)
	b64_plaintext=decrypt(ctext,k)

	print "key is: {}".format(k) 
	print "kelength: {}".format(12)
	print "_______________________________"
	print "base64 plaintext is : \n"
	print b64_plaintext	
	print "_______________________________"
	pt=b64decode(b64_plaintext)
	print "Final message:\n"
	print pt
	pt=pt.split()
	print "_______________________________"
	print "Flag is: "
	print pt[-1]

	





